在应用程序文件夹中打开views.py文件，创建视图

from django.shortcuts import render                                    
from django.contrib.auth.decorators import login_required              #装饰器login_required，放在函数前面限制用户访问，只有登录用户可以访问
from django.http import HttpResponseRedirect,Http404                   #重新定向到指定的url
from django.core.urlresolvers import reverse                           #根据指定的url模式确定url
from .models import Topic,Entry
from .forms import TopicForm,EntryForm

#在这里定义视图


def check_topic_owner(request,topic):
	"""核实关联主题与用户身份"""
	if topic.owner != request.user:                                #确认当前用户身份，错误显示404
		raise Http404

def index(request):                                                    #在应用程序文件夹内创建templates文件，再在该文件夹内创建
	"""学习笔记的主页"""                                             learning_logs文件，在该文件内创建index.html文件。
	return render(request,'learning_logs/index.html')              #打开index.html

@login_required                                                        #装饰器login_required，放在函数前面限制用户访问，只有登录用户可以访问
def topics(request):
	"""显示所有的主题"""
	topics = Topic.objects.order_by('date_added')                  #从数据把Topic的数据取出，按date_added属性排列，存储到topics中
	topics = Topic.objects.filter(owner=request.user).order_by('date_added')  #获取特定用户的数据<owner=request.user>
        context = {'topics':topics}　　　　　　　　　　　　　　　　　　　#将context发送给模板，键是在模板中访问的数据的名称，值为调用的数据
	return render(request,'learning_logs/topics.html',context)　　 #context把模板需要用的值传给模板


@login_required                                                        #装饰器login_required，放在函数前面限制用户访问,只有登录用户可以访问
def topic(request,topic_id):
	"""显示单个主题及其所有的条目"""
	topic = Topic.objects.get(id=topic_id)
        #调用函数确认请求的主题属于当前用户
	check_topic_owner(request,topic)                              #检查用户身份
	entries = topic.entry_set.order_by('-date_added')　　　　　　　#entry_set中entry为模型(类)的名字,entry类在models.py模块中名为Entry
	context = {'topic':topic,'entries':entries}
	return render(request,'learning_logs/topic.html',context)　　 #context同时传两个值给模板
　　　　　　　　　　　　　　　　　　　　　

@login_required                                                       
def new_topic(request):　　　　　　　　　　　　　　　　　　　　　　　　 #向网站提交数据是POST请求，向网站获取数据是get请求。
	"""添加新主题"""
	if request.method != 'POST':                                 #不是post请求，就创建一个新表单                                 
		#未提交数据，创建一个新表单
		form = TopicForm()
	else:
		#POST提交的数据，对数据进行处理
		form = TopicForm(request.POST)　　　　　　　　　　　 #是post请求,值存储在request.POST中
		if form.is_valid():　　　　                         #检查输出是否正确，比如字段是否超过200个字符,
                                                                     我们在models.py中指定的。
			new_topic = form.save(commit=False)　　
                        new_topic.owner = request.user             #确认用户，将数据提交给正确的用户
                        new_topic.save()                           #将表单数据写入数据库　　　　                     　　　　　　　　　　　　　　
			return HttpResponseRedirect(reverse('learning_logs:topics'))　　#将网站重新定向到topics页面
			
	context = {'form':form}                                        #发送到创建新主题页面的值
	return render(request,'learning_logs/new_topic.html',context)  #创建新主题的页面

@login_required
def new_entry(request,topic_id):
	"""在特定主题中添加新条目"""
	topic = Topic.objects.get(id=topic_id)
        #调用函数确认请求的主题属于当前用户
	check_topic_owner(request,topic)                              #检查用户身份
	if request.method != 'POST':
		#未提交数据,创建一个空表单
		form = EntryForm()
	else:
		#POST提交的数据，对数据进行处理
		form = EntryForm(data=request.POST)
		if form.is_valid():
			new_entry = form.save(commit=False)           #参数commit=False将数据存储在new_entry中，不传给数据库
			new_entry.topic = topic                       #让新条目关联到正确的主题
			new_entry.save()　　　　　                    #存储到数据库　　
			return HttpResponseRedirect(reverse('learning_logs:topic',
			args=[topic_id]))　　　　　　　　　　　　　　  #args列表包含url中所有的实参，在这里只包含topic_id
	context = {'topic':topic,'form':form}
	return render(request,'learning_logs/new_entry.html',context)

@login_required
def edit_entry(request,entry_id):
	"""编辑既有条目"""
	entry = Entry.objects.get(id=entry_id)
	topic = entry.topic
        #调用函数确认请求的主题属于当前用户
	check_topic_owner(request,topic)                              #检查用户身份
	if request.method != 'POST':
		#初次请求，使用当前的条目填充表单
		form = EntryForm(instance=entry)
	else:
		#post提交的数据，对数据进行处理
		form = EntryForm(instance=entry,data=request.POST)  　#实参instance保存既有条目内容的基础上创建表单
		if form.is_valid():
			form.save()
			return HttpResponseRedirect(reverse('learning_logs:topic',
			args=[topic.id]))
	context = {'entry':entry,'topic':topic,'form':form}
	return render(request,'learning_logs/edit_entry.html',context)



注册用户
from django.shortcuts import render
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse
from django.contrib.auth import login,logout,authenticate
from django.contrib.auth.forms import UserCreationForm

#在这里创建视图函数

def logout_view(request):
	"""注销用户"""
	logout(request)                                                #注销用户
	return HttpResponseRedirect(reverse('learning_logs:index'))    #重新定向到主页

def register(request):
	"""注册新用户"""
	if request.method != "POST":
		#显示空的注册表单
		form = UserCreationForm()                             #用户注册显示空表单,Django内置表单模板
	else:
		#处理填写好的数据
		form = UserCreationForm(data=request.POST)
		if form.is_valid():                                  #检查用户输入的数据是否正确，两次密码是否一致，有没有试图做恶意的事
			new_user = form.save()　　　　　　　　　　　　#将用户输入的用户名和密码保存到new_user中
			#让用户自动登录，再重新定向到主页
			authenticated_user = authenticate(username=new_user.username,
			password=request.POST['password1'])　　　　　#将用户名和密码传给authenticate()函数
			login(request,authenticated_user)　　　　    #调用login()函数，实现用户自动登录
			return HttpResponseRedirect(reverse('learning_logs:index'))　#用户重新定向到主页
	context = {'form':form}
	return render(request,'users/register.html',context)



























